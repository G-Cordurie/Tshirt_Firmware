/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.6-dev at Thu Jun  2 17:28:40 2022. */

#ifndef PB_MD_PB_H_INCLUDED
#define PB_MD_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum
{
    DATA_TYPE_UNKNOWN = 0,
    DATA_TYPE_ECG = 1,
    DATA_TYPE_BREATH = 2,
    DATA_TYPE_TEMP = 3,
    DATA_TYPE_IMP = 4,
    DATA_TYPE_MEM_DUMP = 5,
    DATA_TYPE_ACC = 6,
    DATA_TYPE_MEM_DUMP_CTRLPT = 7
} data_type_t;
#define DATA_TYPE_MIN DATA_TYPE_UNKNOWN
#define DATA_TYPE_MAX DATA_TYPE_MEM_DUMP_CTRLPT
#define DATA_TYPE_ARRAYSIZE ((data_type_t)(DATA_TYPE_MEM_DUMP_CTRLPT+1))

typedef enum
{
    MD_CMD_ID_NO_COMMAND = 0,
    MD_CMD_ID_START_TRANSFERT = 1,
    MD_CMD_ID_INFO_REQUEST = 2,
    MD_CMD_ID_INFO_RESPONSE = 3,
    MD_CMD_ID_BLOCK_REQUEST = 4,
    MD_CMD_ID_DATA_CHUNK = 5,
    MD_CMD_ID_STOP_TRANSFERT = 6,
    MD_CMD_ID_TRANSFERT_COMPLETE = 7,
    MD_CMD_ID_TRANSFERT_ERROR = 8,
    MD_CMD_ID_MEM_PERCENT = 9
} md_cmd_id_t;
#define MD_CMD_ID_MIN MD_CMD_ID_NO_COMMAND
#define MD_CMD_ID_MAX MD_CMD_ID_MEM_PERCENT
#define MD_CMD_ID_ARRAYSIZE ((md_cmd_id_t)(MD_CMD_ID_MEM_PERCENT+1))

typedef enum
{
    MD_ERROR_TYPE_NO_ERROR = 0,
    MD_ERROR_TYPE_CHUNK_SEQ_NUMBER_ERR = 1
} md_error_type_t;
#define MD_ERROR_TYPE_MIN MD_ERROR_TYPE_NO_ERROR
#define MD_ERROR_TYPE_MAX MD_ERROR_TYPE_CHUNK_SEQ_NUMBER_ERR
#define MD_ERROR_TYPE_ARRAYSIZE ((md_error_type_t)(MD_ERROR_TYPE_CHUNK_SEQ_NUMBER_ERR+1))

typedef enum
{
    MD_STATE_IDLE = 0,
    MD_STATE_PREPARE = 1,
    MD_STATE_IN_PROGRESS = 2,
    MD_STATE_COMPLETED = 3
} md_state_t;
#define MD_STATE_MIN MD_STATE_IDLE
#define MD_STATE_MAX MD_STATE_COMPLETED
#define MD_STATE_ARRAYSIZE ((md_state_t)(MD_STATE_COMPLETED+1))

/* Struct definitions */
typedef struct {
    bool has_cmd_id;
    md_cmd_id_t cmd_id;
/* @@protoc_insertion_point(struct:md_info_req_cmd_t) */
} md_info_req_cmd_t;

typedef struct {
    bool has_cmd_id;
    md_cmd_id_t cmd_id;
    bool has_start_block_addr;
    uint32_t start_block_addr;
    bool has_end_block_addr;
    uint32_t end_block_addr;
    bool has_total_block_nbr;
    uint32_t total_block_nbr;
    bool has_mem_min_block_addr;
    uint32_t mem_min_block_addr;
    bool has_mem_max_block_addr;
    uint32_t mem_max_block_addr;
/* @@protoc_insertion_point(struct:md_info_resp_cmd_t) */
} md_info_resp_cmd_t;

typedef struct {
    bool has_cmd_id;
    md_cmd_id_t cmd_id;
    bool has_mem_percent;
    uint32_t mem_percent;
/* @@protoc_insertion_point(struct:md_mem_percent_cmd_t) */
} md_mem_percent_cmd_t;

typedef PB_BYTES_ARRAY_T(15) md_raw_data_item_payload_t;
typedef struct {
    bool has_type;
    data_type_t type;
    bool has_timestamp;
    uint64_t timestamp;
    bool has_payload;
    md_raw_data_item_payload_t payload;
/* @@protoc_insertion_point(struct:md_raw_data_item_t) */
} md_raw_data_item_t;

typedef struct {
    bool has_cmd_id;
    md_cmd_id_t cmd_id;
/* @@protoc_insertion_point(struct:md_start_transfert_cmd_t) */
} md_start_transfert_cmd_t;

typedef struct {
    bool has_cmd_id;
    md_cmd_id_t cmd_id;
/* @@protoc_insertion_point(struct:md_stop_transfert_cmd_t) */
} md_stop_transfert_cmd_t;

typedef struct {
    bool has_cmd_id;
    md_cmd_id_t cmd_id;
/* @@protoc_insertion_point(struct:md_transfert_complete_cmd_t) */
} md_transfert_complete_cmd_t;

typedef struct {
    bool has_cmd_id;
    md_cmd_id_t cmd_id;
    bool has_err_type;
    md_error_type_t err_type;
    bool has_block_addr;
    uint32_t block_addr;
    bool has_seq_number;
    uint32_t seq_number;
/* @@protoc_insertion_point(struct:md_transfert_error_cmd_t) */
} md_transfert_error_cmd_t;

typedef struct {
    pb_size_t which_cmd;
    union {
        md_start_transfert_cmd_t start_transfert;
        md_transfert_complete_cmd_t transfert_complete;
        md_stop_transfert_cmd_t stop_transfert;
        md_transfert_error_cmd_t transfert_error;
        md_mem_percent_cmd_t mem_percent;
        md_info_req_cmd_t info_req;
        md_info_resp_cmd_t info_resp;
    } cmd;
/* @@protoc_insertion_point(struct:md_ctrlpt_cmd_t) */
} md_ctrlpt_cmd_t;

typedef struct {
    bool has_cmd_id;
    md_cmd_id_t cmd_id;
    bool has_block_addr;
    uint32_t block_addr;
    bool has_seq_number;
    uint32_t seq_number;
    pb_size_t data_count;
    md_raw_data_item_t data[9];
/* @@protoc_insertion_point(struct:md_data_chunk_t) */
} md_data_chunk_t;

/* Default values for struct fields */

/* Initializer values for message structs */
#define MD_START_TRANSFERT_CMD_INIT_DEFAULT      {false, (md_cmd_id_t)0}
#define MD_TRANSFERT_COMPLETE_CMD_INIT_DEFAULT   {false, (md_cmd_id_t)0}
#define MD_STOP_TRANSFERT_CMD_INIT_DEFAULT       {false, (md_cmd_id_t)0}
#define MD_TRANSFERT_ERROR_CMD_INIT_DEFAULT      {false, (md_cmd_id_t)0, false, (md_error_type_t)0, false, 0, false, 0}
#define MD_MEM_PERCENT_CMD_INIT_DEFAULT          {false, (md_cmd_id_t)0, false, 0}
#define MD_INFO_REQ_CMD_INIT_DEFAULT             {false, (md_cmd_id_t)0}
#define MD_INFO_RESP_CMD_INIT_DEFAULT            {false, (md_cmd_id_t)0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define MD_CTRLPT_CMD_INIT_DEFAULT               {0, {MD_START_TRANSFERT_CMD_INIT_DEFAULT}}
#define MD_RAW_DATA_ITEM_INIT_DEFAULT            {false, (data_type_t)0, false, 0, false, {0, {0}}}
#define MD_DATA_CHUNK_INIT_DEFAULT               {false, (md_cmd_id_t)0, false, 0, false, 0, 0, {MD_RAW_DATA_ITEM_INIT_DEFAULT, MD_RAW_DATA_ITEM_INIT_DEFAULT, MD_RAW_DATA_ITEM_INIT_DEFAULT, MD_RAW_DATA_ITEM_INIT_DEFAULT, MD_RAW_DATA_ITEM_INIT_DEFAULT, MD_RAW_DATA_ITEM_INIT_DEFAULT, MD_RAW_DATA_ITEM_INIT_DEFAULT, MD_RAW_DATA_ITEM_INIT_DEFAULT, MD_RAW_DATA_ITEM_INIT_DEFAULT}}
#define MD_START_TRANSFERT_CMD_INIT_ZERO         {false, (md_cmd_id_t)0}
#define MD_TRANSFERT_COMPLETE_CMD_INIT_ZERO      {false, (md_cmd_id_t)0}
#define MD_STOP_TRANSFERT_CMD_INIT_ZERO          {false, (md_cmd_id_t)0}
#define MD_TRANSFERT_ERROR_CMD_INIT_ZERO         {false, (md_cmd_id_t)0, false, (md_error_type_t)0, false, 0, false, 0}
#define MD_MEM_PERCENT_CMD_INIT_ZERO             {false, (md_cmd_id_t)0, false, 0}
#define MD_INFO_REQ_CMD_INIT_ZERO                {false, (md_cmd_id_t)0}
#define MD_INFO_RESP_CMD_INIT_ZERO               {false, (md_cmd_id_t)0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define MD_CTRLPT_CMD_INIT_ZERO                  {0, {MD_START_TRANSFERT_CMD_INIT_ZERO}}
#define MD_RAW_DATA_ITEM_INIT_ZERO               {false, (data_type_t)0, false, 0, false, {0, {0}}}
#define MD_DATA_CHUNK_INIT_ZERO                  {false, (md_cmd_id_t)0, false, 0, false, 0, 0, {MD_RAW_DATA_ITEM_INIT_ZERO, MD_RAW_DATA_ITEM_INIT_ZERO, MD_RAW_DATA_ITEM_INIT_ZERO, MD_RAW_DATA_ITEM_INIT_ZERO, MD_RAW_DATA_ITEM_INIT_ZERO, MD_RAW_DATA_ITEM_INIT_ZERO, MD_RAW_DATA_ITEM_INIT_ZERO, MD_RAW_DATA_ITEM_INIT_ZERO, MD_RAW_DATA_ITEM_INIT_ZERO}}

/* Field tags (for use in manual encoding/decoding) */
#define MD_INFO_REQ_CMD_CMD_ID_TAG               1
#define MD_INFO_RESP_CMD_CMD_ID_TAG              1
#define MD_INFO_RESP_CMD_START_BLOCK_ADDR_TAG    2
#define MD_INFO_RESP_CMD_END_BLOCK_ADDR_TAG      3
#define MD_INFO_RESP_CMD_TOTAL_BLOCK_NBR_TAG     4
#define MD_INFO_RESP_CMD_MEM_MIN_BLOCK_ADDR_TAG  5
#define MD_INFO_RESP_CMD_MEM_MAX_BLOCK_ADDR_TAG  6
#define MD_MEM_PERCENT_CMD_CMD_ID_TAG            1
#define MD_MEM_PERCENT_CMD_MEM_PERCENT_TAG       2
#define MD_RAW_DATA_ITEM_TYPE_TAG                1
#define MD_RAW_DATA_ITEM_TIMESTAMP_TAG           2
#define MD_RAW_DATA_ITEM_PAYLOAD_TAG             3
#define MD_START_TRANSFERT_CMD_CMD_ID_TAG        1
#define MD_STOP_TRANSFERT_CMD_CMD_ID_TAG         1
#define MD_TRANSFERT_COMPLETE_CMD_CMD_ID_TAG     1
#define MD_TRANSFERT_ERROR_CMD_CMD_ID_TAG        1
#define MD_TRANSFERT_ERROR_CMD_ERR_TYPE_TAG      2
#define MD_TRANSFERT_ERROR_CMD_BLOCK_ADDR_TAG    3
#define MD_TRANSFERT_ERROR_CMD_SEQ_NUMBER_TAG    4
#define MD_CTRLPT_CMD_START_TRANSFERT_TAG        1
#define MD_CTRLPT_CMD_TRANSFERT_COMPLETE_TAG     2
#define MD_CTRLPT_CMD_STOP_TRANSFERT_TAG         3
#define MD_CTRLPT_CMD_TRANSFERT_ERROR_TAG        4
#define MD_CTRLPT_CMD_MEM_PERCENT_TAG            5
#define MD_CTRLPT_CMD_INFO_REQ_TAG               6
#define MD_CTRLPT_CMD_INFO_RESP_TAG              7
#define MD_DATA_CHUNK_CMD_ID_TAG                 1
#define MD_DATA_CHUNK_BLOCK_ADDR_TAG             2
#define MD_DATA_CHUNK_SEQ_NUMBER_TAG             3
#define MD_DATA_CHUNK_DATA_TAG                   4

/* Struct field encoding specification for nanopb */
extern const pb_field_t md_start_transfert_cmd_fields[2];
extern const pb_field_t md_transfert_complete_cmd_fields[2];
extern const pb_field_t md_stop_transfert_cmd_fields[2];
extern const pb_field_t md_transfert_error_cmd_fields[5];
extern const pb_field_t md_mem_percent_cmd_fields[3];
extern const pb_field_t md_info_req_cmd_fields[2];
extern const pb_field_t md_info_resp_cmd_fields[7];
extern const pb_field_t md_ctrlpt_cmd_fields[8];
extern const pb_field_t md_raw_data_item_fields[4];
extern const pb_field_t md_data_chunk_fields[5];

/* Maximum encoded size of messages (where known) */
#define MD_START_TRANSFERT_CMD_SIZE              2
#define MD_TRANSFERT_COMPLETE_CMD_SIZE           2
#define MD_STOP_TRANSFERT_CMD_SIZE               2
#define MD_TRANSFERT_ERROR_CMD_SIZE              16
#define MD_MEM_PERCENT_CMD_SIZE                  8
#define MD_INFO_REQ_CMD_SIZE                     2
#define MD_INFO_RESP_CMD_SIZE                    32
#define MD_CTRLPT_CMD_SIZE                       34
#define MD_RAW_DATA_ITEM_SIZE                    30
#define MD_DATA_CHUNK_SIZE                       302

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define MD_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
